Linked List Data Structure:
-Linked lists consist of nodes which contain a value and a pointer to another node.
    C pointers review: '*', '&', and '->' are important operators when using pointers.
        * - The defererencing operator, which returns the value of a variable at a given address
        & - The referencing operator, which returns the address of a given variable
        -> - A shorthand operator for dereferencing a struct and retrieving one of its members, for example foo->bar is equivalent to (*foo).bar
        
-A linked list begins with a head, the first node which is not pointed to by other nodes, and ends with a tail, which points to no other nodes.

Algorithm for Merging Nodes in Between Zeros
-Starting with the first node after the head, traverse the linked list until a 0 is reached and keep a running sum of each node's value.
-Set the given 0-value node's value to total the sum, for example using the head for the sum of the first set of merged nodes.
-Once the next 0 is reached, unless that node is the tail, set the nodes as follows:
    -The node with the sum should point to the next 0-value node.
    -Set the node for the next sum to be the next 0-value node.
    -The node which is being used to traverse the linked list should be set to the next node after the next 0-value node.

